
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Advogado
 * 
 */
export type Advogado = $Result.DefaultSelection<Prisma.$AdvogadoPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model ModeloTexto
 * 
 */
export type ModeloTexto = $Result.DefaultSelection<Prisma.$ModeloTextoPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Tipo: {
  FISICA: 'FISICA',
  JURIDICA: 'JURIDICA'
};

export type Tipo = (typeof Tipo)[keyof typeof Tipo]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Tipo = $Enums.Tipo

export const Tipo: typeof $Enums.Tipo

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Advogados
 * const advogados = await prisma.advogado.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Advogados
   * const advogados = await prisma.advogado.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.advogado`: Exposes CRUD operations for the **Advogado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Advogados
    * const advogados = await prisma.advogado.findMany()
    * ```
    */
  get advogado(): Prisma.AdvogadoDelegate<ExtArgs>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs>;

  /**
   * `prisma.modeloTexto`: Exposes CRUD operations for the **ModeloTexto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ModeloTextos
    * const modeloTextos = await prisma.modeloTexto.findMany()
    * ```
    */
  get modeloTexto(): Prisma.ModeloTextoDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Advogado: 'Advogado',
    Cliente: 'Cliente',
    ModeloTexto: 'ModeloTexto',
    Tag: 'Tag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'advogado' | 'cliente' | 'modeloTexto' | 'tag'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Advogado: {
        payload: Prisma.$AdvogadoPayload<ExtArgs>
        fields: Prisma.AdvogadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdvogadoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdvogadoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload>
          }
          findFirst: {
            args: Prisma.AdvogadoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdvogadoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload>
          }
          findMany: {
            args: Prisma.AdvogadoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload>[]
          }
          create: {
            args: Prisma.AdvogadoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload>
          }
          createMany: {
            args: Prisma.AdvogadoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdvogadoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload>
          }
          update: {
            args: Prisma.AdvogadoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload>
          }
          deleteMany: {
            args: Prisma.AdvogadoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdvogadoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdvogadoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvogadoPayload>
          }
          aggregate: {
            args: Prisma.AdvogadoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdvogado>
          }
          groupBy: {
            args: Prisma.AdvogadoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdvogadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdvogadoCountArgs<ExtArgs>,
            result: $Utils.Optional<AdvogadoCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>,
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      ModeloTexto: {
        payload: Prisma.$ModeloTextoPayload<ExtArgs>
        fields: Prisma.ModeloTextoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModeloTextoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModeloTextoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload>
          }
          findFirst: {
            args: Prisma.ModeloTextoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModeloTextoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload>
          }
          findMany: {
            args: Prisma.ModeloTextoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload>[]
          }
          create: {
            args: Prisma.ModeloTextoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload>
          }
          createMany: {
            args: Prisma.ModeloTextoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ModeloTextoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload>
          }
          update: {
            args: Prisma.ModeloTextoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload>
          }
          deleteMany: {
            args: Prisma.ModeloTextoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ModeloTextoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ModeloTextoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModeloTextoPayload>
          }
          aggregate: {
            args: Prisma.ModeloTextoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateModeloTexto>
          }
          groupBy: {
            args: Prisma.ModeloTextoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ModeloTextoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModeloTextoCountArgs<ExtArgs>,
            result: $Utils.Optional<ModeloTextoCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>,
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdvogadoCountOutputType
   */

  export type AdvogadoCountOutputType = {
    clientes: number
    modelosTexto: number
  }

  export type AdvogadoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | AdvogadoCountOutputTypeCountClientesArgs
    modelosTexto?: boolean | AdvogadoCountOutputTypeCountModelosTextoArgs
  }

  // Custom InputTypes
  /**
   * AdvogadoCountOutputType without action
   */
  export type AdvogadoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvogadoCountOutputType
     */
    select?: AdvogadoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdvogadoCountOutputType without action
   */
  export type AdvogadoCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
  }

  /**
   * AdvogadoCountOutputType without action
   */
  export type AdvogadoCountOutputTypeCountModelosTextoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeloTextoWhereInput
  }


  /**
   * Count Type ModeloTextoCountOutputType
   */

  export type ModeloTextoCountOutputType = {
    tags: number
  }

  export type ModeloTextoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tags?: boolean | ModeloTextoCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes
  /**
   * ModeloTextoCountOutputType without action
   */
  export type ModeloTextoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTextoCountOutputType
     */
    select?: ModeloTextoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModeloTextoCountOutputType without action
   */
  export type ModeloTextoCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    modelos: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modelos?: boolean | TagCountOutputTypeCountModelosArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountModelosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeloTextoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Advogado
   */

  export type AggregateAdvogado = {
    _count: AdvogadoCountAggregateOutputType | null
    _avg: AdvogadoAvgAggregateOutputType | null
    _sum: AdvogadoSumAggregateOutputType | null
    _min: AdvogadoMinAggregateOutputType | null
    _max: AdvogadoMaxAggregateOutputType | null
  }

  export type AdvogadoAvgAggregateOutputType = {
    id: number | null
  }

  export type AdvogadoSumAggregateOutputType = {
    id: number | null
  }

  export type AdvogadoMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    email: string | null
    password: string | null
    nome: string | null
    nascimento: Date | null
    role: $Enums.Role | null
    isActive: boolean | null
  }

  export type AdvogadoMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    email: string | null
    password: string | null
    nome: string | null
    nascimento: Date | null
    role: $Enums.Role | null
    isActive: boolean | null
  }

  export type AdvogadoCountAggregateOutputType = {
    id: number
    createdAt: number
    email: number
    password: number
    nome: number
    nascimento: number
    role: number
    isActive: number
    _all: number
  }


  export type AdvogadoAvgAggregateInputType = {
    id?: true
  }

  export type AdvogadoSumAggregateInputType = {
    id?: true
  }

  export type AdvogadoMinAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    password?: true
    nome?: true
    nascimento?: true
    role?: true
    isActive?: true
  }

  export type AdvogadoMaxAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    password?: true
    nome?: true
    nascimento?: true
    role?: true
    isActive?: true
  }

  export type AdvogadoCountAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    password?: true
    nome?: true
    nascimento?: true
    role?: true
    isActive?: true
    _all?: true
  }

  export type AdvogadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Advogado to aggregate.
     */
    where?: AdvogadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Advogados to fetch.
     */
    orderBy?: AdvogadoOrderByWithRelationInput | AdvogadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdvogadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Advogados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Advogados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Advogados
    **/
    _count?: true | AdvogadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdvogadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdvogadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdvogadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdvogadoMaxAggregateInputType
  }

  export type GetAdvogadoAggregateType<T extends AdvogadoAggregateArgs> = {
        [P in keyof T & keyof AggregateAdvogado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdvogado[P]>
      : GetScalarType<T[P], AggregateAdvogado[P]>
  }




  export type AdvogadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdvogadoWhereInput
    orderBy?: AdvogadoOrderByWithAggregationInput | AdvogadoOrderByWithAggregationInput[]
    by: AdvogadoScalarFieldEnum[] | AdvogadoScalarFieldEnum
    having?: AdvogadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdvogadoCountAggregateInputType | true
    _avg?: AdvogadoAvgAggregateInputType
    _sum?: AdvogadoSumAggregateInputType
    _min?: AdvogadoMinAggregateInputType
    _max?: AdvogadoMaxAggregateInputType
  }

  export type AdvogadoGroupByOutputType = {
    id: number
    createdAt: Date
    email: string
    password: string
    nome: string | null
    nascimento: Date | null
    role: $Enums.Role
    isActive: boolean
    _count: AdvogadoCountAggregateOutputType | null
    _avg: AdvogadoAvgAggregateOutputType | null
    _sum: AdvogadoSumAggregateOutputType | null
    _min: AdvogadoMinAggregateOutputType | null
    _max: AdvogadoMaxAggregateOutputType | null
  }

  type GetAdvogadoGroupByPayload<T extends AdvogadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdvogadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdvogadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdvogadoGroupByOutputType[P]>
            : GetScalarType<T[P], AdvogadoGroupByOutputType[P]>
        }
      >
    >


  export type AdvogadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    email?: boolean
    password?: boolean
    nome?: boolean
    nascimento?: boolean
    role?: boolean
    isActive?: boolean
    clientes?: boolean | Advogado$clientesArgs<ExtArgs>
    modelosTexto?: boolean | Advogado$modelosTextoArgs<ExtArgs>
    _count?: boolean | AdvogadoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["advogado"]>

  export type AdvogadoSelectScalar = {
    id?: boolean
    createdAt?: boolean
    email?: boolean
    password?: boolean
    nome?: boolean
    nascimento?: boolean
    role?: boolean
    isActive?: boolean
  }


  export type AdvogadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | Advogado$clientesArgs<ExtArgs>
    modelosTexto?: boolean | Advogado$modelosTextoArgs<ExtArgs>
    _count?: boolean | AdvogadoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AdvogadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Advogado"
    objects: {
      clientes: Prisma.$ClientePayload<ExtArgs>[]
      modelosTexto: Prisma.$ModeloTextoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      email: string
      password: string
      nome: string | null
      nascimento: Date | null
      role: $Enums.Role
      isActive: boolean
    }, ExtArgs["result"]["advogado"]>
    composites: {}
  }


  type AdvogadoGetPayload<S extends boolean | null | undefined | AdvogadoDefaultArgs> = $Result.GetResult<Prisma.$AdvogadoPayload, S>

  type AdvogadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdvogadoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdvogadoCountAggregateInputType | true
    }

  export interface AdvogadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Advogado'], meta: { name: 'Advogado' } }
    /**
     * Find zero or one Advogado that matches the filter.
     * @param {AdvogadoFindUniqueArgs} args - Arguments to find a Advogado
     * @example
     * // Get one Advogado
     * const advogado = await prisma.advogado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdvogadoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdvogadoFindUniqueArgs<ExtArgs>>
    ): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Advogado that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdvogadoFindUniqueOrThrowArgs} args - Arguments to find a Advogado
     * @example
     * // Get one Advogado
     * const advogado = await prisma.advogado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdvogadoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvogadoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Advogado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvogadoFindFirstArgs} args - Arguments to find a Advogado
     * @example
     * // Get one Advogado
     * const advogado = await prisma.advogado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdvogadoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvogadoFindFirstArgs<ExtArgs>>
    ): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Advogado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvogadoFindFirstOrThrowArgs} args - Arguments to find a Advogado
     * @example
     * // Get one Advogado
     * const advogado = await prisma.advogado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdvogadoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvogadoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Advogados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvogadoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Advogados
     * const advogados = await prisma.advogado.findMany()
     * 
     * // Get first 10 Advogados
     * const advogados = await prisma.advogado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const advogadoWithIdOnly = await prisma.advogado.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdvogadoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvogadoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Advogado.
     * @param {AdvogadoCreateArgs} args - Arguments to create a Advogado.
     * @example
     * // Create one Advogado
     * const Advogado = await prisma.advogado.create({
     *   data: {
     *     // ... data to create a Advogado
     *   }
     * })
     * 
    **/
    create<T extends AdvogadoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdvogadoCreateArgs<ExtArgs>>
    ): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Advogados.
     *     @param {AdvogadoCreateManyArgs} args - Arguments to create many Advogados.
     *     @example
     *     // Create many Advogados
     *     const advogado = await prisma.advogado.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdvogadoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvogadoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Advogado.
     * @param {AdvogadoDeleteArgs} args - Arguments to delete one Advogado.
     * @example
     * // Delete one Advogado
     * const Advogado = await prisma.advogado.delete({
     *   where: {
     *     // ... filter to delete one Advogado
     *   }
     * })
     * 
    **/
    delete<T extends AdvogadoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdvogadoDeleteArgs<ExtArgs>>
    ): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Advogado.
     * @param {AdvogadoUpdateArgs} args - Arguments to update one Advogado.
     * @example
     * // Update one Advogado
     * const advogado = await prisma.advogado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdvogadoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdvogadoUpdateArgs<ExtArgs>>
    ): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Advogados.
     * @param {AdvogadoDeleteManyArgs} args - Arguments to filter Advogados to delete.
     * @example
     * // Delete a few Advogados
     * const { count } = await prisma.advogado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdvogadoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvogadoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Advogados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvogadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Advogados
     * const advogado = await prisma.advogado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdvogadoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdvogadoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Advogado.
     * @param {AdvogadoUpsertArgs} args - Arguments to update or create a Advogado.
     * @example
     * // Update or create a Advogado
     * const advogado = await prisma.advogado.upsert({
     *   create: {
     *     // ... data to create a Advogado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Advogado we want to update
     *   }
     * })
    **/
    upsert<T extends AdvogadoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdvogadoUpsertArgs<ExtArgs>>
    ): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Advogados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvogadoCountArgs} args - Arguments to filter Advogados to count.
     * @example
     * // Count the number of Advogados
     * const count = await prisma.advogado.count({
     *   where: {
     *     // ... the filter for the Advogados we want to count
     *   }
     * })
    **/
    count<T extends AdvogadoCountArgs>(
      args?: Subset<T, AdvogadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdvogadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Advogado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvogadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdvogadoAggregateArgs>(args: Subset<T, AdvogadoAggregateArgs>): Prisma.PrismaPromise<GetAdvogadoAggregateType<T>>

    /**
     * Group by Advogado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvogadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdvogadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdvogadoGroupByArgs['orderBy'] }
        : { orderBy?: AdvogadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdvogadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdvogadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Advogado model
   */
  readonly fields: AdvogadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Advogado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdvogadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    clientes<T extends Advogado$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Advogado$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findMany'> | Null>;

    modelosTexto<T extends Advogado$modelosTextoArgs<ExtArgs> = {}>(args?: Subset<T, Advogado$modelosTextoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Advogado model
   */ 
  interface AdvogadoFieldRefs {
    readonly id: FieldRef<"Advogado", 'Int'>
    readonly createdAt: FieldRef<"Advogado", 'DateTime'>
    readonly email: FieldRef<"Advogado", 'String'>
    readonly password: FieldRef<"Advogado", 'String'>
    readonly nome: FieldRef<"Advogado", 'String'>
    readonly nascimento: FieldRef<"Advogado", 'DateTime'>
    readonly role: FieldRef<"Advogado", 'Role'>
    readonly isActive: FieldRef<"Advogado", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Advogado findUnique
   */
  export type AdvogadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * Filter, which Advogado to fetch.
     */
    where: AdvogadoWhereUniqueInput
  }

  /**
   * Advogado findUniqueOrThrow
   */
  export type AdvogadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * Filter, which Advogado to fetch.
     */
    where: AdvogadoWhereUniqueInput
  }

  /**
   * Advogado findFirst
   */
  export type AdvogadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * Filter, which Advogado to fetch.
     */
    where?: AdvogadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Advogados to fetch.
     */
    orderBy?: AdvogadoOrderByWithRelationInput | AdvogadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Advogados.
     */
    cursor?: AdvogadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Advogados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Advogados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Advogados.
     */
    distinct?: AdvogadoScalarFieldEnum | AdvogadoScalarFieldEnum[]
  }

  /**
   * Advogado findFirstOrThrow
   */
  export type AdvogadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * Filter, which Advogado to fetch.
     */
    where?: AdvogadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Advogados to fetch.
     */
    orderBy?: AdvogadoOrderByWithRelationInput | AdvogadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Advogados.
     */
    cursor?: AdvogadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Advogados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Advogados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Advogados.
     */
    distinct?: AdvogadoScalarFieldEnum | AdvogadoScalarFieldEnum[]
  }

  /**
   * Advogado findMany
   */
  export type AdvogadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * Filter, which Advogados to fetch.
     */
    where?: AdvogadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Advogados to fetch.
     */
    orderBy?: AdvogadoOrderByWithRelationInput | AdvogadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Advogados.
     */
    cursor?: AdvogadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Advogados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Advogados.
     */
    skip?: number
    distinct?: AdvogadoScalarFieldEnum | AdvogadoScalarFieldEnum[]
  }

  /**
   * Advogado create
   */
  export type AdvogadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Advogado.
     */
    data: XOR<AdvogadoCreateInput, AdvogadoUncheckedCreateInput>
  }

  /**
   * Advogado createMany
   */
  export type AdvogadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Advogados.
     */
    data: AdvogadoCreateManyInput | AdvogadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Advogado update
   */
  export type AdvogadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Advogado.
     */
    data: XOR<AdvogadoUpdateInput, AdvogadoUncheckedUpdateInput>
    /**
     * Choose, which Advogado to update.
     */
    where: AdvogadoWhereUniqueInput
  }

  /**
   * Advogado updateMany
   */
  export type AdvogadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Advogados.
     */
    data: XOR<AdvogadoUpdateManyMutationInput, AdvogadoUncheckedUpdateManyInput>
    /**
     * Filter which Advogados to update
     */
    where?: AdvogadoWhereInput
  }

  /**
   * Advogado upsert
   */
  export type AdvogadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Advogado to update in case it exists.
     */
    where: AdvogadoWhereUniqueInput
    /**
     * In case the Advogado found by the `where` argument doesn't exist, create a new Advogado with this data.
     */
    create: XOR<AdvogadoCreateInput, AdvogadoUncheckedCreateInput>
    /**
     * In case the Advogado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdvogadoUpdateInput, AdvogadoUncheckedUpdateInput>
  }

  /**
   * Advogado delete
   */
  export type AdvogadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
    /**
     * Filter which Advogado to delete.
     */
    where: AdvogadoWhereUniqueInput
  }

  /**
   * Advogado deleteMany
   */
  export type AdvogadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Advogados to delete
     */
    where?: AdvogadoWhereInput
  }

  /**
   * Advogado.clientes
   */
  export type Advogado$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    cursor?: ClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Advogado.modelosTexto
   */
  export type Advogado$modelosTextoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    where?: ModeloTextoWhereInput
    orderBy?: ModeloTextoOrderByWithRelationInput | ModeloTextoOrderByWithRelationInput[]
    cursor?: ModeloTextoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModeloTextoScalarFieldEnum | ModeloTextoScalarFieldEnum[]
  }

  /**
   * Advogado without action
   */
  export type AdvogadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advogado
     */
    select?: AdvogadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvogadoInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
    advogadoId: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
    advogadoId: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nome: string | null
    tipo: $Enums.Tipo | null
    cpf: string | null
    cnpj: string | null
    nascimento: string | null
    nomeMae: string | null
    nomePai: string | null
    conjuge: string | null
    estadoCivil: string | null
    isActive: boolean | null
    advogadoId: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    tipo: $Enums.Tipo | null
    cpf: string | null
    cnpj: string | null
    nascimento: string | null
    nomeMae: string | null
    nomePai: string | null
    conjuge: string | null
    estadoCivil: string | null
    isActive: boolean | null
    advogadoId: number | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nome: number
    tipo: number
    cpf: number
    cnpj: number
    nascimento: number
    nomeMae: number
    nomePai: number
    conjuge: number
    estadoCivil: number
    isActive: number
    advogadoId: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
    advogadoId?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
    advogadoId?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    cpf?: true
    cnpj?: true
    nascimento?: true
    nomeMae?: true
    nomePai?: true
    conjuge?: true
    estadoCivil?: true
    isActive?: true
    advogadoId?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    cpf?: true
    cnpj?: true
    nascimento?: true
    nomeMae?: true
    nomePai?: true
    conjuge?: true
    estadoCivil?: true
    isActive?: true
    advogadoId?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    cpf?: true
    cnpj?: true
    nascimento?: true
    nomeMae?: true
    nomePai?: true
    conjuge?: true
    estadoCivil?: true
    isActive?: true
    advogadoId?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nome: string
    tipo: $Enums.Tipo
    cpf: string | null
    cnpj: string | null
    nascimento: string | null
    nomeMae: string | null
    nomePai: string | null
    conjuge: string | null
    estadoCivil: string | null
    isActive: boolean
    advogadoId: number
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tipo?: boolean
    cpf?: boolean
    cnpj?: boolean
    nascimento?: boolean
    nomeMae?: boolean
    nomePai?: boolean
    conjuge?: boolean
    estadoCivil?: boolean
    isActive?: boolean
    advogadoId?: boolean
    advogado?: boolean | AdvogadoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    id?: boolean
    nome?: boolean
    tipo?: boolean
    cpf?: boolean
    cnpj?: boolean
    nascimento?: boolean
    nomeMae?: boolean
    nomePai?: boolean
    conjuge?: boolean
    estadoCivil?: boolean
    isActive?: boolean
    advogadoId?: boolean
  }


  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    advogado?: boolean | AdvogadoDefaultArgs<ExtArgs>
  }


  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      advogado: Prisma.$AdvogadoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      tipo: $Enums.Tipo
      cpf: string | null
      cnpj: string | null
      nascimento: string | null
      nomeMae: string | null
      nomePai: string | null
      conjuge: string | null
      estadoCivil: string | null
      isActive: boolean
      advogadoId: number
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }


  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clientes.
     *     @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const cliente = await prisma.cliente.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    advogado<T extends AdvogadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdvogadoDefaultArgs<ExtArgs>>): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly nome: FieldRef<"Cliente", 'String'>
    readonly tipo: FieldRef<"Cliente", 'Tipo'>
    readonly cpf: FieldRef<"Cliente", 'String'>
    readonly cnpj: FieldRef<"Cliente", 'String'>
    readonly nascimento: FieldRef<"Cliente", 'String'>
    readonly nomeMae: FieldRef<"Cliente", 'String'>
    readonly nomePai: FieldRef<"Cliente", 'String'>
    readonly conjuge: FieldRef<"Cliente", 'String'>
    readonly estadoCivil: FieldRef<"Cliente", 'String'>
    readonly isActive: FieldRef<"Cliente", 'Boolean'>
    readonly advogadoId: FieldRef<"Cliente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model ModeloTexto
   */

  export type AggregateModeloTexto = {
    _count: ModeloTextoCountAggregateOutputType | null
    _avg: ModeloTextoAvgAggregateOutputType | null
    _sum: ModeloTextoSumAggregateOutputType | null
    _min: ModeloTextoMinAggregateOutputType | null
    _max: ModeloTextoMaxAggregateOutputType | null
  }

  export type ModeloTextoAvgAggregateOutputType = {
    id: number | null
    advogadoId: number | null
  }

  export type ModeloTextoSumAggregateOutputType = {
    id: number | null
    advogadoId: number | null
  }

  export type ModeloTextoMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    texto: string | null
    isActive: boolean | null
    advogadoId: number | null
  }

  export type ModeloTextoMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    texto: string | null
    isActive: boolean | null
    advogadoId: number | null
  }

  export type ModeloTextoCountAggregateOutputType = {
    id: number
    titulo: number
    texto: number
    isActive: number
    advogadoId: number
    _all: number
  }


  export type ModeloTextoAvgAggregateInputType = {
    id?: true
    advogadoId?: true
  }

  export type ModeloTextoSumAggregateInputType = {
    id?: true
    advogadoId?: true
  }

  export type ModeloTextoMinAggregateInputType = {
    id?: true
    titulo?: true
    texto?: true
    isActive?: true
    advogadoId?: true
  }

  export type ModeloTextoMaxAggregateInputType = {
    id?: true
    titulo?: true
    texto?: true
    isActive?: true
    advogadoId?: true
  }

  export type ModeloTextoCountAggregateInputType = {
    id?: true
    titulo?: true
    texto?: true
    isActive?: true
    advogadoId?: true
    _all?: true
  }

  export type ModeloTextoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModeloTexto to aggregate.
     */
    where?: ModeloTextoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeloTextos to fetch.
     */
    orderBy?: ModeloTextoOrderByWithRelationInput | ModeloTextoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModeloTextoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeloTextos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeloTextos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ModeloTextos
    **/
    _count?: true | ModeloTextoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModeloTextoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModeloTextoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModeloTextoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModeloTextoMaxAggregateInputType
  }

  export type GetModeloTextoAggregateType<T extends ModeloTextoAggregateArgs> = {
        [P in keyof T & keyof AggregateModeloTexto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModeloTexto[P]>
      : GetScalarType<T[P], AggregateModeloTexto[P]>
  }




  export type ModeloTextoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModeloTextoWhereInput
    orderBy?: ModeloTextoOrderByWithAggregationInput | ModeloTextoOrderByWithAggregationInput[]
    by: ModeloTextoScalarFieldEnum[] | ModeloTextoScalarFieldEnum
    having?: ModeloTextoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModeloTextoCountAggregateInputType | true
    _avg?: ModeloTextoAvgAggregateInputType
    _sum?: ModeloTextoSumAggregateInputType
    _min?: ModeloTextoMinAggregateInputType
    _max?: ModeloTextoMaxAggregateInputType
  }

  export type ModeloTextoGroupByOutputType = {
    id: number
    titulo: string
    texto: string
    isActive: boolean
    advogadoId: number
    _count: ModeloTextoCountAggregateOutputType | null
    _avg: ModeloTextoAvgAggregateOutputType | null
    _sum: ModeloTextoSumAggregateOutputType | null
    _min: ModeloTextoMinAggregateOutputType | null
    _max: ModeloTextoMaxAggregateOutputType | null
  }

  type GetModeloTextoGroupByPayload<T extends ModeloTextoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModeloTextoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModeloTextoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModeloTextoGroupByOutputType[P]>
            : GetScalarType<T[P], ModeloTextoGroupByOutputType[P]>
        }
      >
    >


  export type ModeloTextoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    texto?: boolean
    isActive?: boolean
    advogadoId?: boolean
    advogado?: boolean | AdvogadoDefaultArgs<ExtArgs>
    tags?: boolean | ModeloTexto$tagsArgs<ExtArgs>
    _count?: boolean | ModeloTextoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["modeloTexto"]>

  export type ModeloTextoSelectScalar = {
    id?: boolean
    titulo?: boolean
    texto?: boolean
    isActive?: boolean
    advogadoId?: boolean
  }


  export type ModeloTextoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    advogado?: boolean | AdvogadoDefaultArgs<ExtArgs>
    tags?: boolean | ModeloTexto$tagsArgs<ExtArgs>
    _count?: boolean | ModeloTextoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ModeloTextoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ModeloTexto"
    objects: {
      advogado: Prisma.$AdvogadoPayload<ExtArgs>
      tags: Prisma.$TagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      texto: string
      isActive: boolean
      advogadoId: number
    }, ExtArgs["result"]["modeloTexto"]>
    composites: {}
  }


  type ModeloTextoGetPayload<S extends boolean | null | undefined | ModeloTextoDefaultArgs> = $Result.GetResult<Prisma.$ModeloTextoPayload, S>

  type ModeloTextoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModeloTextoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModeloTextoCountAggregateInputType | true
    }

  export interface ModeloTextoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ModeloTexto'], meta: { name: 'ModeloTexto' } }
    /**
     * Find zero or one ModeloTexto that matches the filter.
     * @param {ModeloTextoFindUniqueArgs} args - Arguments to find a ModeloTexto
     * @example
     * // Get one ModeloTexto
     * const modeloTexto = await prisma.modeloTexto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ModeloTextoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloTextoFindUniqueArgs<ExtArgs>>
    ): Prisma__ModeloTextoClient<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ModeloTexto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ModeloTextoFindUniqueOrThrowArgs} args - Arguments to find a ModeloTexto
     * @example
     * // Get one ModeloTexto
     * const modeloTexto = await prisma.modeloTexto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ModeloTextoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloTextoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ModeloTextoClient<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ModeloTexto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloTextoFindFirstArgs} args - Arguments to find a ModeloTexto
     * @example
     * // Get one ModeloTexto
     * const modeloTexto = await prisma.modeloTexto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ModeloTextoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloTextoFindFirstArgs<ExtArgs>>
    ): Prisma__ModeloTextoClient<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ModeloTexto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloTextoFindFirstOrThrowArgs} args - Arguments to find a ModeloTexto
     * @example
     * // Get one ModeloTexto
     * const modeloTexto = await prisma.modeloTexto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ModeloTextoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloTextoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ModeloTextoClient<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ModeloTextos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloTextoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ModeloTextos
     * const modeloTextos = await prisma.modeloTexto.findMany()
     * 
     * // Get first 10 ModeloTextos
     * const modeloTextos = await prisma.modeloTexto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modeloTextoWithIdOnly = await prisma.modeloTexto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ModeloTextoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloTextoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ModeloTexto.
     * @param {ModeloTextoCreateArgs} args - Arguments to create a ModeloTexto.
     * @example
     * // Create one ModeloTexto
     * const ModeloTexto = await prisma.modeloTexto.create({
     *   data: {
     *     // ... data to create a ModeloTexto
     *   }
     * })
     * 
    **/
    create<T extends ModeloTextoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloTextoCreateArgs<ExtArgs>>
    ): Prisma__ModeloTextoClient<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ModeloTextos.
     *     @param {ModeloTextoCreateManyArgs} args - Arguments to create many ModeloTextos.
     *     @example
     *     // Create many ModeloTextos
     *     const modeloTexto = await prisma.modeloTexto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ModeloTextoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloTextoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ModeloTexto.
     * @param {ModeloTextoDeleteArgs} args - Arguments to delete one ModeloTexto.
     * @example
     * // Delete one ModeloTexto
     * const ModeloTexto = await prisma.modeloTexto.delete({
     *   where: {
     *     // ... filter to delete one ModeloTexto
     *   }
     * })
     * 
    **/
    delete<T extends ModeloTextoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloTextoDeleteArgs<ExtArgs>>
    ): Prisma__ModeloTextoClient<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ModeloTexto.
     * @param {ModeloTextoUpdateArgs} args - Arguments to update one ModeloTexto.
     * @example
     * // Update one ModeloTexto
     * const modeloTexto = await prisma.modeloTexto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ModeloTextoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloTextoUpdateArgs<ExtArgs>>
    ): Prisma__ModeloTextoClient<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ModeloTextos.
     * @param {ModeloTextoDeleteManyArgs} args - Arguments to filter ModeloTextos to delete.
     * @example
     * // Delete a few ModeloTextos
     * const { count } = await prisma.modeloTexto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ModeloTextoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModeloTextoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ModeloTextos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloTextoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ModeloTextos
     * const modeloTexto = await prisma.modeloTexto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ModeloTextoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloTextoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ModeloTexto.
     * @param {ModeloTextoUpsertArgs} args - Arguments to update or create a ModeloTexto.
     * @example
     * // Update or create a ModeloTexto
     * const modeloTexto = await prisma.modeloTexto.upsert({
     *   create: {
     *     // ... data to create a ModeloTexto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ModeloTexto we want to update
     *   }
     * })
    **/
    upsert<T extends ModeloTextoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ModeloTextoUpsertArgs<ExtArgs>>
    ): Prisma__ModeloTextoClient<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ModeloTextos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloTextoCountArgs} args - Arguments to filter ModeloTextos to count.
     * @example
     * // Count the number of ModeloTextos
     * const count = await prisma.modeloTexto.count({
     *   where: {
     *     // ... the filter for the ModeloTextos we want to count
     *   }
     * })
    **/
    count<T extends ModeloTextoCountArgs>(
      args?: Subset<T, ModeloTextoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModeloTextoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ModeloTexto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloTextoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModeloTextoAggregateArgs>(args: Subset<T, ModeloTextoAggregateArgs>): Prisma.PrismaPromise<GetModeloTextoAggregateType<T>>

    /**
     * Group by ModeloTexto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModeloTextoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModeloTextoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModeloTextoGroupByArgs['orderBy'] }
        : { orderBy?: ModeloTextoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModeloTextoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModeloTextoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ModeloTexto model
   */
  readonly fields: ModeloTextoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ModeloTexto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModeloTextoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    advogado<T extends AdvogadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdvogadoDefaultArgs<ExtArgs>>): Prisma__AdvogadoClient<$Result.GetResult<Prisma.$AdvogadoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tags<T extends ModeloTexto$tagsArgs<ExtArgs> = {}>(args?: Subset<T, ModeloTexto$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ModeloTexto model
   */ 
  interface ModeloTextoFieldRefs {
    readonly id: FieldRef<"ModeloTexto", 'Int'>
    readonly titulo: FieldRef<"ModeloTexto", 'String'>
    readonly texto: FieldRef<"ModeloTexto", 'String'>
    readonly isActive: FieldRef<"ModeloTexto", 'Boolean'>
    readonly advogadoId: FieldRef<"ModeloTexto", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ModeloTexto findUnique
   */
  export type ModeloTextoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * Filter, which ModeloTexto to fetch.
     */
    where: ModeloTextoWhereUniqueInput
  }

  /**
   * ModeloTexto findUniqueOrThrow
   */
  export type ModeloTextoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * Filter, which ModeloTexto to fetch.
     */
    where: ModeloTextoWhereUniqueInput
  }

  /**
   * ModeloTexto findFirst
   */
  export type ModeloTextoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * Filter, which ModeloTexto to fetch.
     */
    where?: ModeloTextoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeloTextos to fetch.
     */
    orderBy?: ModeloTextoOrderByWithRelationInput | ModeloTextoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModeloTextos.
     */
    cursor?: ModeloTextoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeloTextos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeloTextos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModeloTextos.
     */
    distinct?: ModeloTextoScalarFieldEnum | ModeloTextoScalarFieldEnum[]
  }

  /**
   * ModeloTexto findFirstOrThrow
   */
  export type ModeloTextoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * Filter, which ModeloTexto to fetch.
     */
    where?: ModeloTextoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeloTextos to fetch.
     */
    orderBy?: ModeloTextoOrderByWithRelationInput | ModeloTextoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ModeloTextos.
     */
    cursor?: ModeloTextoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeloTextos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeloTextos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ModeloTextos.
     */
    distinct?: ModeloTextoScalarFieldEnum | ModeloTextoScalarFieldEnum[]
  }

  /**
   * ModeloTexto findMany
   */
  export type ModeloTextoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * Filter, which ModeloTextos to fetch.
     */
    where?: ModeloTextoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ModeloTextos to fetch.
     */
    orderBy?: ModeloTextoOrderByWithRelationInput | ModeloTextoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ModeloTextos.
     */
    cursor?: ModeloTextoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ModeloTextos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ModeloTextos.
     */
    skip?: number
    distinct?: ModeloTextoScalarFieldEnum | ModeloTextoScalarFieldEnum[]
  }

  /**
   * ModeloTexto create
   */
  export type ModeloTextoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * The data needed to create a ModeloTexto.
     */
    data: XOR<ModeloTextoCreateInput, ModeloTextoUncheckedCreateInput>
  }

  /**
   * ModeloTexto createMany
   */
  export type ModeloTextoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ModeloTextos.
     */
    data: ModeloTextoCreateManyInput | ModeloTextoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ModeloTexto update
   */
  export type ModeloTextoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * The data needed to update a ModeloTexto.
     */
    data: XOR<ModeloTextoUpdateInput, ModeloTextoUncheckedUpdateInput>
    /**
     * Choose, which ModeloTexto to update.
     */
    where: ModeloTextoWhereUniqueInput
  }

  /**
   * ModeloTexto updateMany
   */
  export type ModeloTextoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ModeloTextos.
     */
    data: XOR<ModeloTextoUpdateManyMutationInput, ModeloTextoUncheckedUpdateManyInput>
    /**
     * Filter which ModeloTextos to update
     */
    where?: ModeloTextoWhereInput
  }

  /**
   * ModeloTexto upsert
   */
  export type ModeloTextoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * The filter to search for the ModeloTexto to update in case it exists.
     */
    where: ModeloTextoWhereUniqueInput
    /**
     * In case the ModeloTexto found by the `where` argument doesn't exist, create a new ModeloTexto with this data.
     */
    create: XOR<ModeloTextoCreateInput, ModeloTextoUncheckedCreateInput>
    /**
     * In case the ModeloTexto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModeloTextoUpdateInput, ModeloTextoUncheckedUpdateInput>
  }

  /**
   * ModeloTexto delete
   */
  export type ModeloTextoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    /**
     * Filter which ModeloTexto to delete.
     */
    where: ModeloTextoWhereUniqueInput
  }

  /**
   * ModeloTexto deleteMany
   */
  export type ModeloTextoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ModeloTextos to delete
     */
    where?: ModeloTextoWhereInput
  }

  /**
   * ModeloTexto.tags
   */
  export type ModeloTexto$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * ModeloTexto without action
   */
  export type ModeloTextoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
  }

  export type TagMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: number
    nome: string
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    modelos?: boolean | Tag$modelosArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    nome?: boolean
  }


  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    modelos?: boolean | Tag$modelosArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      modelos: Prisma.$ModeloTextoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }


  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TagCreateArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TagDeleteArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpdateArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpsertArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    modelos<T extends Tag$modelosArgs<ExtArgs> = {}>(args?: Subset<T, Tag$modelosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModeloTextoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'Int'>
    readonly nome: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.modelos
   */
  export type Tag$modelosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModeloTexto
     */
    select?: ModeloTextoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModeloTextoInclude<ExtArgs> | null
    where?: ModeloTextoWhereInput
    orderBy?: ModeloTextoOrderByWithRelationInput | ModeloTextoOrderByWithRelationInput[]
    cursor?: ModeloTextoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModeloTextoScalarFieldEnum | ModeloTextoScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdvogadoScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    email: 'email',
    password: 'password',
    nome: 'nome',
    nascimento: 'nascimento',
    role: 'role',
    isActive: 'isActive'
  };

  export type AdvogadoScalarFieldEnum = (typeof AdvogadoScalarFieldEnum)[keyof typeof AdvogadoScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    tipo: 'tipo',
    cpf: 'cpf',
    cnpj: 'cnpj',
    nascimento: 'nascimento',
    nomeMae: 'nomeMae',
    nomePai: 'nomePai',
    conjuge: 'conjuge',
    estadoCivil: 'estadoCivil',
    isActive: 'isActive',
    advogadoId: 'advogadoId'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const ModeloTextoScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    texto: 'texto',
    isActive: 'isActive',
    advogadoId: 'advogadoId'
  };

  export type ModeloTextoScalarFieldEnum = (typeof ModeloTextoScalarFieldEnum)[keyof typeof ModeloTextoScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Tipo'
   */
  export type EnumTipoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Tipo'>
    


  /**
   * Reference to a field of type 'Tipo[]'
   */
  export type ListEnumTipoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Tipo[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdvogadoWhereInput = {
    AND?: AdvogadoWhereInput | AdvogadoWhereInput[]
    OR?: AdvogadoWhereInput[]
    NOT?: AdvogadoWhereInput | AdvogadoWhereInput[]
    id?: IntFilter<"Advogado"> | number
    createdAt?: DateTimeFilter<"Advogado"> | Date | string
    email?: StringFilter<"Advogado"> | string
    password?: StringFilter<"Advogado"> | string
    nome?: StringNullableFilter<"Advogado"> | string | null
    nascimento?: DateTimeNullableFilter<"Advogado"> | Date | string | null
    role?: EnumRoleFilter<"Advogado"> | $Enums.Role
    isActive?: BoolFilter<"Advogado"> | boolean
    clientes?: ClienteListRelationFilter
    modelosTexto?: ModeloTextoListRelationFilter
  }

  export type AdvogadoOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nome?: SortOrderInput | SortOrder
    nascimento?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    clientes?: ClienteOrderByRelationAggregateInput
    modelosTexto?: ModeloTextoOrderByRelationAggregateInput
  }

  export type AdvogadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AdvogadoWhereInput | AdvogadoWhereInput[]
    OR?: AdvogadoWhereInput[]
    NOT?: AdvogadoWhereInput | AdvogadoWhereInput[]
    createdAt?: DateTimeFilter<"Advogado"> | Date | string
    password?: StringFilter<"Advogado"> | string
    nome?: StringNullableFilter<"Advogado"> | string | null
    nascimento?: DateTimeNullableFilter<"Advogado"> | Date | string | null
    role?: EnumRoleFilter<"Advogado"> | $Enums.Role
    isActive?: BoolFilter<"Advogado"> | boolean
    clientes?: ClienteListRelationFilter
    modelosTexto?: ModeloTextoListRelationFilter
  }, "id" | "email">

  export type AdvogadoOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nome?: SortOrderInput | SortOrder
    nascimento?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    _count?: AdvogadoCountOrderByAggregateInput
    _avg?: AdvogadoAvgOrderByAggregateInput
    _max?: AdvogadoMaxOrderByAggregateInput
    _min?: AdvogadoMinOrderByAggregateInput
    _sum?: AdvogadoSumOrderByAggregateInput
  }

  export type AdvogadoScalarWhereWithAggregatesInput = {
    AND?: AdvogadoScalarWhereWithAggregatesInput | AdvogadoScalarWhereWithAggregatesInput[]
    OR?: AdvogadoScalarWhereWithAggregatesInput[]
    NOT?: AdvogadoScalarWhereWithAggregatesInput | AdvogadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Advogado"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Advogado"> | Date | string
    email?: StringWithAggregatesFilter<"Advogado"> | string
    password?: StringWithAggregatesFilter<"Advogado"> | string
    nome?: StringNullableWithAggregatesFilter<"Advogado"> | string | null
    nascimento?: DateTimeNullableWithAggregatesFilter<"Advogado"> | Date | string | null
    role?: EnumRoleWithAggregatesFilter<"Advogado"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"Advogado"> | boolean
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    tipo?: EnumTipoFilter<"Cliente"> | $Enums.Tipo
    cpf?: StringNullableFilter<"Cliente"> | string | null
    cnpj?: StringNullableFilter<"Cliente"> | string | null
    nascimento?: StringNullableFilter<"Cliente"> | string | null
    nomeMae?: StringNullableFilter<"Cliente"> | string | null
    nomePai?: StringNullableFilter<"Cliente"> | string | null
    conjuge?: StringNullableFilter<"Cliente"> | string | null
    estadoCivil?: StringNullableFilter<"Cliente"> | string | null
    isActive?: BoolFilter<"Cliente"> | boolean
    advogadoId?: IntFilter<"Cliente"> | number
    advogado?: XOR<AdvogadoRelationFilter, AdvogadoWhereInput>
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    cpf?: SortOrderInput | SortOrder
    cnpj?: SortOrderInput | SortOrder
    nascimento?: SortOrderInput | SortOrder
    nomeMae?: SortOrderInput | SortOrder
    nomePai?: SortOrderInput | SortOrder
    conjuge?: SortOrderInput | SortOrder
    estadoCivil?: SortOrderInput | SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
    advogado?: AdvogadoOrderByWithRelationInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nome?: StringFilter<"Cliente"> | string
    tipo?: EnumTipoFilter<"Cliente"> | $Enums.Tipo
    cpf?: StringNullableFilter<"Cliente"> | string | null
    cnpj?: StringNullableFilter<"Cliente"> | string | null
    nascimento?: StringNullableFilter<"Cliente"> | string | null
    nomeMae?: StringNullableFilter<"Cliente"> | string | null
    nomePai?: StringNullableFilter<"Cliente"> | string | null
    conjuge?: StringNullableFilter<"Cliente"> | string | null
    estadoCivil?: StringNullableFilter<"Cliente"> | string | null
    isActive?: BoolFilter<"Cliente"> | boolean
    advogadoId?: IntFilter<"Cliente"> | number
    advogado?: XOR<AdvogadoRelationFilter, AdvogadoWhereInput>
  }, "id">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    cpf?: SortOrderInput | SortOrder
    cnpj?: SortOrderInput | SortOrder
    nascimento?: SortOrderInput | SortOrder
    nomeMae?: SortOrderInput | SortOrder
    nomePai?: SortOrderInput | SortOrder
    conjuge?: SortOrderInput | SortOrder
    estadoCivil?: SortOrderInput | SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    nome?: StringWithAggregatesFilter<"Cliente"> | string
    tipo?: EnumTipoWithAggregatesFilter<"Cliente"> | $Enums.Tipo
    cpf?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    cnpj?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    nascimento?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    nomeMae?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    nomePai?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    conjuge?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    estadoCivil?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    isActive?: BoolWithAggregatesFilter<"Cliente"> | boolean
    advogadoId?: IntWithAggregatesFilter<"Cliente"> | number
  }

  export type ModeloTextoWhereInput = {
    AND?: ModeloTextoWhereInput | ModeloTextoWhereInput[]
    OR?: ModeloTextoWhereInput[]
    NOT?: ModeloTextoWhereInput | ModeloTextoWhereInput[]
    id?: IntFilter<"ModeloTexto"> | number
    titulo?: StringFilter<"ModeloTexto"> | string
    texto?: StringFilter<"ModeloTexto"> | string
    isActive?: BoolFilter<"ModeloTexto"> | boolean
    advogadoId?: IntFilter<"ModeloTexto"> | number
    advogado?: XOR<AdvogadoRelationFilter, AdvogadoWhereInput>
    tags?: TagListRelationFilter
  }

  export type ModeloTextoOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    texto?: SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
    advogado?: AdvogadoOrderByWithRelationInput
    tags?: TagOrderByRelationAggregateInput
  }

  export type ModeloTextoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ModeloTextoWhereInput | ModeloTextoWhereInput[]
    OR?: ModeloTextoWhereInput[]
    NOT?: ModeloTextoWhereInput | ModeloTextoWhereInput[]
    titulo?: StringFilter<"ModeloTexto"> | string
    texto?: StringFilter<"ModeloTexto"> | string
    isActive?: BoolFilter<"ModeloTexto"> | boolean
    advogadoId?: IntFilter<"ModeloTexto"> | number
    advogado?: XOR<AdvogadoRelationFilter, AdvogadoWhereInput>
    tags?: TagListRelationFilter
  }, "id">

  export type ModeloTextoOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    texto?: SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
    _count?: ModeloTextoCountOrderByAggregateInput
    _avg?: ModeloTextoAvgOrderByAggregateInput
    _max?: ModeloTextoMaxOrderByAggregateInput
    _min?: ModeloTextoMinOrderByAggregateInput
    _sum?: ModeloTextoSumOrderByAggregateInput
  }

  export type ModeloTextoScalarWhereWithAggregatesInput = {
    AND?: ModeloTextoScalarWhereWithAggregatesInput | ModeloTextoScalarWhereWithAggregatesInput[]
    OR?: ModeloTextoScalarWhereWithAggregatesInput[]
    NOT?: ModeloTextoScalarWhereWithAggregatesInput | ModeloTextoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ModeloTexto"> | number
    titulo?: StringWithAggregatesFilter<"ModeloTexto"> | string
    texto?: StringWithAggregatesFilter<"ModeloTexto"> | string
    isActive?: BoolWithAggregatesFilter<"ModeloTexto"> | boolean
    advogadoId?: IntWithAggregatesFilter<"ModeloTexto"> | number
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: IntFilter<"Tag"> | number
    nome?: StringFilter<"Tag"> | string
    modelos?: ModeloTextoListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    modelos?: ModeloTextoOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    modelos?: ModeloTextoListRelationFilter
  }, "id" | "nome">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tag"> | number
    nome?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type AdvogadoCreateInput = {
    createdAt?: Date | string
    email: string
    password: string
    nome?: string | null
    nascimento?: Date | string | null
    role?: $Enums.Role
    isActive?: boolean
    clientes?: ClienteCreateNestedManyWithoutAdvogadoInput
    modelosTexto?: ModeloTextoCreateNestedManyWithoutAdvogadoInput
  }

  export type AdvogadoUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    email: string
    password: string
    nome?: string | null
    nascimento?: Date | string | null
    role?: $Enums.Role
    isActive?: boolean
    clientes?: ClienteUncheckedCreateNestedManyWithoutAdvogadoInput
    modelosTexto?: ModeloTextoUncheckedCreateNestedManyWithoutAdvogadoInput
  }

  export type AdvogadoUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    clientes?: ClienteUpdateManyWithoutAdvogadoNestedInput
    modelosTexto?: ModeloTextoUpdateManyWithoutAdvogadoNestedInput
  }

  export type AdvogadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    clientes?: ClienteUncheckedUpdateManyWithoutAdvogadoNestedInput
    modelosTexto?: ModeloTextoUncheckedUpdateManyWithoutAdvogadoNestedInput
  }

  export type AdvogadoCreateManyInput = {
    id?: number
    createdAt?: Date | string
    email: string
    password: string
    nome?: string | null
    nascimento?: Date | string | null
    role?: $Enums.Role
    isActive?: boolean
  }

  export type AdvogadoUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdvogadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClienteCreateInput = {
    nome: string
    tipo?: $Enums.Tipo
    cpf?: string | null
    cnpj?: string | null
    nascimento?: string | null
    nomeMae?: string | null
    nomePai?: string | null
    conjuge?: string | null
    estadoCivil?: string | null
    isActive?: boolean
    advogado: AdvogadoCreateNestedOneWithoutClientesInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nome: string
    tipo?: $Enums.Tipo
    cpf?: string | null
    cnpj?: string | null
    nascimento?: string | null
    nomeMae?: string | null
    nomePai?: string | null
    conjuge?: string | null
    estadoCivil?: string | null
    isActive?: boolean
    advogadoId: number
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    nomeMae?: NullableStringFieldUpdateOperationsInput | string | null
    nomePai?: NullableStringFieldUpdateOperationsInput | string | null
    conjuge?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogado?: AdvogadoUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    nomeMae?: NullableStringFieldUpdateOperationsInput | string | null
    nomePai?: NullableStringFieldUpdateOperationsInput | string | null
    conjuge?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogadoId?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteCreateManyInput = {
    id?: number
    nome: string
    tipo?: $Enums.Tipo
    cpf?: string | null
    cnpj?: string | null
    nascimento?: string | null
    nomeMae?: string | null
    nomePai?: string | null
    conjuge?: string | null
    estadoCivil?: string | null
    isActive?: boolean
    advogadoId: number
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    nomeMae?: NullableStringFieldUpdateOperationsInput | string | null
    nomePai?: NullableStringFieldUpdateOperationsInput | string | null
    conjuge?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    nomeMae?: NullableStringFieldUpdateOperationsInput | string | null
    nomePai?: NullableStringFieldUpdateOperationsInput | string | null
    conjuge?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogadoId?: IntFieldUpdateOperationsInput | number
  }

  export type ModeloTextoCreateInput = {
    titulo: string
    texto: string
    isActive?: boolean
    advogado: AdvogadoCreateNestedOneWithoutModelosTextoInput
    tags?: TagCreateNestedManyWithoutModelosInput
  }

  export type ModeloTextoUncheckedCreateInput = {
    id?: number
    titulo: string
    texto: string
    isActive?: boolean
    advogadoId: number
    tags?: TagUncheckedCreateNestedManyWithoutModelosInput
  }

  export type ModeloTextoUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogado?: AdvogadoUpdateOneRequiredWithoutModelosTextoNestedInput
    tags?: TagUpdateManyWithoutModelosNestedInput
  }

  export type ModeloTextoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogadoId?: IntFieldUpdateOperationsInput | number
    tags?: TagUncheckedUpdateManyWithoutModelosNestedInput
  }

  export type ModeloTextoCreateManyInput = {
    id?: number
    titulo: string
    texto: string
    isActive?: boolean
    advogadoId: number
  }

  export type ModeloTextoUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ModeloTextoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogadoId?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateInput = {
    nome: string
    modelos?: ModeloTextoCreateNestedManyWithoutTagsInput
  }

  export type TagUncheckedCreateInput = {
    id?: number
    nome: string
    modelos?: ModeloTextoUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    modelos?: ModeloTextoUpdateManyWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    modelos?: ModeloTextoUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagCreateManyInput = {
    id?: number
    nome: string
  }

  export type TagUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ClienteListRelationFilter = {
    every?: ClienteWhereInput
    some?: ClienteWhereInput
    none?: ClienteWhereInput
  }

  export type ModeloTextoListRelationFilter = {
    every?: ModeloTextoWhereInput
    some?: ModeloTextoWhereInput
    none?: ModeloTextoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ClienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ModeloTextoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdvogadoCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nome?: SortOrder
    nascimento?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
  }

  export type AdvogadoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdvogadoMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nome?: SortOrder
    nascimento?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
  }

  export type AdvogadoMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nome?: SortOrder
    nascimento?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
  }

  export type AdvogadoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTipoFilter<$PrismaModel = never> = {
    equals?: $Enums.Tipo | EnumTipoFieldRefInput<$PrismaModel>
    in?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoFilter<$PrismaModel> | $Enums.Tipo
  }

  export type AdvogadoRelationFilter = {
    is?: AdvogadoWhereInput
    isNot?: AdvogadoWhereInput
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    cpf?: SortOrder
    cnpj?: SortOrder
    nascimento?: SortOrder
    nomeMae?: SortOrder
    nomePai?: SortOrder
    conjuge?: SortOrder
    estadoCivil?: SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
    advogadoId?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    cpf?: SortOrder
    cnpj?: SortOrder
    nascimento?: SortOrder
    nomeMae?: SortOrder
    nomePai?: SortOrder
    conjuge?: SortOrder
    estadoCivil?: SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    cpf?: SortOrder
    cnpj?: SortOrder
    nascimento?: SortOrder
    nomeMae?: SortOrder
    nomePai?: SortOrder
    conjuge?: SortOrder
    estadoCivil?: SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
    advogadoId?: SortOrder
  }

  export type EnumTipoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Tipo | EnumTipoFieldRefInput<$PrismaModel>
    in?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoWithAggregatesFilter<$PrismaModel> | $Enums.Tipo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoFilter<$PrismaModel>
    _max?: NestedEnumTipoFilter<$PrismaModel>
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ModeloTextoCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    texto?: SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
  }

  export type ModeloTextoAvgOrderByAggregateInput = {
    id?: SortOrder
    advogadoId?: SortOrder
  }

  export type ModeloTextoMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    texto?: SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
  }

  export type ModeloTextoMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    texto?: SortOrder
    isActive?: SortOrder
    advogadoId?: SortOrder
  }

  export type ModeloTextoSumOrderByAggregateInput = {
    id?: SortOrder
    advogadoId?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteCreateNestedManyWithoutAdvogadoInput = {
    create?: XOR<ClienteCreateWithoutAdvogadoInput, ClienteUncheckedCreateWithoutAdvogadoInput> | ClienteCreateWithoutAdvogadoInput[] | ClienteUncheckedCreateWithoutAdvogadoInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutAdvogadoInput | ClienteCreateOrConnectWithoutAdvogadoInput[]
    createMany?: ClienteCreateManyAdvogadoInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type ModeloTextoCreateNestedManyWithoutAdvogadoInput = {
    create?: XOR<ModeloTextoCreateWithoutAdvogadoInput, ModeloTextoUncheckedCreateWithoutAdvogadoInput> | ModeloTextoCreateWithoutAdvogadoInput[] | ModeloTextoUncheckedCreateWithoutAdvogadoInput[]
    connectOrCreate?: ModeloTextoCreateOrConnectWithoutAdvogadoInput | ModeloTextoCreateOrConnectWithoutAdvogadoInput[]
    createMany?: ModeloTextoCreateManyAdvogadoInputEnvelope
    connect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
  }

  export type ClienteUncheckedCreateNestedManyWithoutAdvogadoInput = {
    create?: XOR<ClienteCreateWithoutAdvogadoInput, ClienteUncheckedCreateWithoutAdvogadoInput> | ClienteCreateWithoutAdvogadoInput[] | ClienteUncheckedCreateWithoutAdvogadoInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutAdvogadoInput | ClienteCreateOrConnectWithoutAdvogadoInput[]
    createMany?: ClienteCreateManyAdvogadoInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type ModeloTextoUncheckedCreateNestedManyWithoutAdvogadoInput = {
    create?: XOR<ModeloTextoCreateWithoutAdvogadoInput, ModeloTextoUncheckedCreateWithoutAdvogadoInput> | ModeloTextoCreateWithoutAdvogadoInput[] | ModeloTextoUncheckedCreateWithoutAdvogadoInput[]
    connectOrCreate?: ModeloTextoCreateOrConnectWithoutAdvogadoInput | ModeloTextoCreateOrConnectWithoutAdvogadoInput[]
    createMany?: ModeloTextoCreateManyAdvogadoInputEnvelope
    connect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClienteUpdateManyWithoutAdvogadoNestedInput = {
    create?: XOR<ClienteCreateWithoutAdvogadoInput, ClienteUncheckedCreateWithoutAdvogadoInput> | ClienteCreateWithoutAdvogadoInput[] | ClienteUncheckedCreateWithoutAdvogadoInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutAdvogadoInput | ClienteCreateOrConnectWithoutAdvogadoInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutAdvogadoInput | ClienteUpsertWithWhereUniqueWithoutAdvogadoInput[]
    createMany?: ClienteCreateManyAdvogadoInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutAdvogadoInput | ClienteUpdateWithWhereUniqueWithoutAdvogadoInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutAdvogadoInput | ClienteUpdateManyWithWhereWithoutAdvogadoInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type ModeloTextoUpdateManyWithoutAdvogadoNestedInput = {
    create?: XOR<ModeloTextoCreateWithoutAdvogadoInput, ModeloTextoUncheckedCreateWithoutAdvogadoInput> | ModeloTextoCreateWithoutAdvogadoInput[] | ModeloTextoUncheckedCreateWithoutAdvogadoInput[]
    connectOrCreate?: ModeloTextoCreateOrConnectWithoutAdvogadoInput | ModeloTextoCreateOrConnectWithoutAdvogadoInput[]
    upsert?: ModeloTextoUpsertWithWhereUniqueWithoutAdvogadoInput | ModeloTextoUpsertWithWhereUniqueWithoutAdvogadoInput[]
    createMany?: ModeloTextoCreateManyAdvogadoInputEnvelope
    set?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    disconnect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    delete?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    connect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    update?: ModeloTextoUpdateWithWhereUniqueWithoutAdvogadoInput | ModeloTextoUpdateWithWhereUniqueWithoutAdvogadoInput[]
    updateMany?: ModeloTextoUpdateManyWithWhereWithoutAdvogadoInput | ModeloTextoUpdateManyWithWhereWithoutAdvogadoInput[]
    deleteMany?: ModeloTextoScalarWhereInput | ModeloTextoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteUncheckedUpdateManyWithoutAdvogadoNestedInput = {
    create?: XOR<ClienteCreateWithoutAdvogadoInput, ClienteUncheckedCreateWithoutAdvogadoInput> | ClienteCreateWithoutAdvogadoInput[] | ClienteUncheckedCreateWithoutAdvogadoInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutAdvogadoInput | ClienteCreateOrConnectWithoutAdvogadoInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutAdvogadoInput | ClienteUpsertWithWhereUniqueWithoutAdvogadoInput[]
    createMany?: ClienteCreateManyAdvogadoInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutAdvogadoInput | ClienteUpdateWithWhereUniqueWithoutAdvogadoInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutAdvogadoInput | ClienteUpdateManyWithWhereWithoutAdvogadoInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type ModeloTextoUncheckedUpdateManyWithoutAdvogadoNestedInput = {
    create?: XOR<ModeloTextoCreateWithoutAdvogadoInput, ModeloTextoUncheckedCreateWithoutAdvogadoInput> | ModeloTextoCreateWithoutAdvogadoInput[] | ModeloTextoUncheckedCreateWithoutAdvogadoInput[]
    connectOrCreate?: ModeloTextoCreateOrConnectWithoutAdvogadoInput | ModeloTextoCreateOrConnectWithoutAdvogadoInput[]
    upsert?: ModeloTextoUpsertWithWhereUniqueWithoutAdvogadoInput | ModeloTextoUpsertWithWhereUniqueWithoutAdvogadoInput[]
    createMany?: ModeloTextoCreateManyAdvogadoInputEnvelope
    set?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    disconnect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    delete?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    connect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    update?: ModeloTextoUpdateWithWhereUniqueWithoutAdvogadoInput | ModeloTextoUpdateWithWhereUniqueWithoutAdvogadoInput[]
    updateMany?: ModeloTextoUpdateManyWithWhereWithoutAdvogadoInput | ModeloTextoUpdateManyWithWhereWithoutAdvogadoInput[]
    deleteMany?: ModeloTextoScalarWhereInput | ModeloTextoScalarWhereInput[]
  }

  export type AdvogadoCreateNestedOneWithoutClientesInput = {
    create?: XOR<AdvogadoCreateWithoutClientesInput, AdvogadoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: AdvogadoCreateOrConnectWithoutClientesInput
    connect?: AdvogadoWhereUniqueInput
  }

  export type EnumTipoFieldUpdateOperationsInput = {
    set?: $Enums.Tipo
  }

  export type AdvogadoUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<AdvogadoCreateWithoutClientesInput, AdvogadoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: AdvogadoCreateOrConnectWithoutClientesInput
    upsert?: AdvogadoUpsertWithoutClientesInput
    connect?: AdvogadoWhereUniqueInput
    update?: XOR<XOR<AdvogadoUpdateToOneWithWhereWithoutClientesInput, AdvogadoUpdateWithoutClientesInput>, AdvogadoUncheckedUpdateWithoutClientesInput>
  }

  export type AdvogadoCreateNestedOneWithoutModelosTextoInput = {
    create?: XOR<AdvogadoCreateWithoutModelosTextoInput, AdvogadoUncheckedCreateWithoutModelosTextoInput>
    connectOrCreate?: AdvogadoCreateOrConnectWithoutModelosTextoInput
    connect?: AdvogadoWhereUniqueInput
  }

  export type TagCreateNestedManyWithoutModelosInput = {
    create?: XOR<TagCreateWithoutModelosInput, TagUncheckedCreateWithoutModelosInput> | TagCreateWithoutModelosInput[] | TagUncheckedCreateWithoutModelosInput[]
    connectOrCreate?: TagCreateOrConnectWithoutModelosInput | TagCreateOrConnectWithoutModelosInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type TagUncheckedCreateNestedManyWithoutModelosInput = {
    create?: XOR<TagCreateWithoutModelosInput, TagUncheckedCreateWithoutModelosInput> | TagCreateWithoutModelosInput[] | TagUncheckedCreateWithoutModelosInput[]
    connectOrCreate?: TagCreateOrConnectWithoutModelosInput | TagCreateOrConnectWithoutModelosInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
  }

  export type AdvogadoUpdateOneRequiredWithoutModelosTextoNestedInput = {
    create?: XOR<AdvogadoCreateWithoutModelosTextoInput, AdvogadoUncheckedCreateWithoutModelosTextoInput>
    connectOrCreate?: AdvogadoCreateOrConnectWithoutModelosTextoInput
    upsert?: AdvogadoUpsertWithoutModelosTextoInput
    connect?: AdvogadoWhereUniqueInput
    update?: XOR<XOR<AdvogadoUpdateToOneWithWhereWithoutModelosTextoInput, AdvogadoUpdateWithoutModelosTextoInput>, AdvogadoUncheckedUpdateWithoutModelosTextoInput>
  }

  export type TagUpdateManyWithoutModelosNestedInput = {
    create?: XOR<TagCreateWithoutModelosInput, TagUncheckedCreateWithoutModelosInput> | TagCreateWithoutModelosInput[] | TagUncheckedCreateWithoutModelosInput[]
    connectOrCreate?: TagCreateOrConnectWithoutModelosInput | TagCreateOrConnectWithoutModelosInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutModelosInput | TagUpsertWithWhereUniqueWithoutModelosInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutModelosInput | TagUpdateWithWhereUniqueWithoutModelosInput[]
    updateMany?: TagUpdateManyWithWhereWithoutModelosInput | TagUpdateManyWithWhereWithoutModelosInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type TagUncheckedUpdateManyWithoutModelosNestedInput = {
    create?: XOR<TagCreateWithoutModelosInput, TagUncheckedCreateWithoutModelosInput> | TagCreateWithoutModelosInput[] | TagUncheckedCreateWithoutModelosInput[]
    connectOrCreate?: TagCreateOrConnectWithoutModelosInput | TagCreateOrConnectWithoutModelosInput[]
    upsert?: TagUpsertWithWhereUniqueWithoutModelosInput | TagUpsertWithWhereUniqueWithoutModelosInput[]
    set?: TagWhereUniqueInput | TagWhereUniqueInput[]
    disconnect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    delete?: TagWhereUniqueInput | TagWhereUniqueInput[]
    connect?: TagWhereUniqueInput | TagWhereUniqueInput[]
    update?: TagUpdateWithWhereUniqueWithoutModelosInput | TagUpdateWithWhereUniqueWithoutModelosInput[]
    updateMany?: TagUpdateManyWithWhereWithoutModelosInput | TagUpdateManyWithWhereWithoutModelosInput[]
    deleteMany?: TagScalarWhereInput | TagScalarWhereInput[]
  }

  export type ModeloTextoCreateNestedManyWithoutTagsInput = {
    create?: XOR<ModeloTextoCreateWithoutTagsInput, ModeloTextoUncheckedCreateWithoutTagsInput> | ModeloTextoCreateWithoutTagsInput[] | ModeloTextoUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ModeloTextoCreateOrConnectWithoutTagsInput | ModeloTextoCreateOrConnectWithoutTagsInput[]
    connect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
  }

  export type ModeloTextoUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<ModeloTextoCreateWithoutTagsInput, ModeloTextoUncheckedCreateWithoutTagsInput> | ModeloTextoCreateWithoutTagsInput[] | ModeloTextoUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ModeloTextoCreateOrConnectWithoutTagsInput | ModeloTextoCreateOrConnectWithoutTagsInput[]
    connect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
  }

  export type ModeloTextoUpdateManyWithoutTagsNestedInput = {
    create?: XOR<ModeloTextoCreateWithoutTagsInput, ModeloTextoUncheckedCreateWithoutTagsInput> | ModeloTextoCreateWithoutTagsInput[] | ModeloTextoUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ModeloTextoCreateOrConnectWithoutTagsInput | ModeloTextoCreateOrConnectWithoutTagsInput[]
    upsert?: ModeloTextoUpsertWithWhereUniqueWithoutTagsInput | ModeloTextoUpsertWithWhereUniqueWithoutTagsInput[]
    set?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    disconnect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    delete?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    connect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    update?: ModeloTextoUpdateWithWhereUniqueWithoutTagsInput | ModeloTextoUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: ModeloTextoUpdateManyWithWhereWithoutTagsInput | ModeloTextoUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: ModeloTextoScalarWhereInput | ModeloTextoScalarWhereInput[]
  }

  export type ModeloTextoUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<ModeloTextoCreateWithoutTagsInput, ModeloTextoUncheckedCreateWithoutTagsInput> | ModeloTextoCreateWithoutTagsInput[] | ModeloTextoUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: ModeloTextoCreateOrConnectWithoutTagsInput | ModeloTextoCreateOrConnectWithoutTagsInput[]
    upsert?: ModeloTextoUpsertWithWhereUniqueWithoutTagsInput | ModeloTextoUpsertWithWhereUniqueWithoutTagsInput[]
    set?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    disconnect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    delete?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    connect?: ModeloTextoWhereUniqueInput | ModeloTextoWhereUniqueInput[]
    update?: ModeloTextoUpdateWithWhereUniqueWithoutTagsInput | ModeloTextoUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: ModeloTextoUpdateManyWithWhereWithoutTagsInput | ModeloTextoUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: ModeloTextoScalarWhereInput | ModeloTextoScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumTipoFilter<$PrismaModel = never> = {
    equals?: $Enums.Tipo | EnumTipoFieldRefInput<$PrismaModel>
    in?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoFilter<$PrismaModel> | $Enums.Tipo
  }

  export type NestedEnumTipoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Tipo | EnumTipoFieldRefInput<$PrismaModel>
    in?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tipo[] | ListEnumTipoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoWithAggregatesFilter<$PrismaModel> | $Enums.Tipo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoFilter<$PrismaModel>
    _max?: NestedEnumTipoFilter<$PrismaModel>
  }

  export type ClienteCreateWithoutAdvogadoInput = {
    nome: string
    tipo?: $Enums.Tipo
    cpf?: string | null
    cnpj?: string | null
    nascimento?: string | null
    nomeMae?: string | null
    nomePai?: string | null
    conjuge?: string | null
    estadoCivil?: string | null
    isActive?: boolean
  }

  export type ClienteUncheckedCreateWithoutAdvogadoInput = {
    id?: number
    nome: string
    tipo?: $Enums.Tipo
    cpf?: string | null
    cnpj?: string | null
    nascimento?: string | null
    nomeMae?: string | null
    nomePai?: string | null
    conjuge?: string | null
    estadoCivil?: string | null
    isActive?: boolean
  }

  export type ClienteCreateOrConnectWithoutAdvogadoInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutAdvogadoInput, ClienteUncheckedCreateWithoutAdvogadoInput>
  }

  export type ClienteCreateManyAdvogadoInputEnvelope = {
    data: ClienteCreateManyAdvogadoInput | ClienteCreateManyAdvogadoInput[]
    skipDuplicates?: boolean
  }

  export type ModeloTextoCreateWithoutAdvogadoInput = {
    titulo: string
    texto: string
    isActive?: boolean
    tags?: TagCreateNestedManyWithoutModelosInput
  }

  export type ModeloTextoUncheckedCreateWithoutAdvogadoInput = {
    id?: number
    titulo: string
    texto: string
    isActive?: boolean
    tags?: TagUncheckedCreateNestedManyWithoutModelosInput
  }

  export type ModeloTextoCreateOrConnectWithoutAdvogadoInput = {
    where: ModeloTextoWhereUniqueInput
    create: XOR<ModeloTextoCreateWithoutAdvogadoInput, ModeloTextoUncheckedCreateWithoutAdvogadoInput>
  }

  export type ModeloTextoCreateManyAdvogadoInputEnvelope = {
    data: ModeloTextoCreateManyAdvogadoInput | ModeloTextoCreateManyAdvogadoInput[]
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithWhereUniqueWithoutAdvogadoInput = {
    where: ClienteWhereUniqueInput
    update: XOR<ClienteUpdateWithoutAdvogadoInput, ClienteUncheckedUpdateWithoutAdvogadoInput>
    create: XOR<ClienteCreateWithoutAdvogadoInput, ClienteUncheckedCreateWithoutAdvogadoInput>
  }

  export type ClienteUpdateWithWhereUniqueWithoutAdvogadoInput = {
    where: ClienteWhereUniqueInput
    data: XOR<ClienteUpdateWithoutAdvogadoInput, ClienteUncheckedUpdateWithoutAdvogadoInput>
  }

  export type ClienteUpdateManyWithWhereWithoutAdvogadoInput = {
    where: ClienteScalarWhereInput
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyWithoutAdvogadoInput>
  }

  export type ClienteScalarWhereInput = {
    AND?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    OR?: ClienteScalarWhereInput[]
    NOT?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    tipo?: EnumTipoFilter<"Cliente"> | $Enums.Tipo
    cpf?: StringNullableFilter<"Cliente"> | string | null
    cnpj?: StringNullableFilter<"Cliente"> | string | null
    nascimento?: StringNullableFilter<"Cliente"> | string | null
    nomeMae?: StringNullableFilter<"Cliente"> | string | null
    nomePai?: StringNullableFilter<"Cliente"> | string | null
    conjuge?: StringNullableFilter<"Cliente"> | string | null
    estadoCivil?: StringNullableFilter<"Cliente"> | string | null
    isActive?: BoolFilter<"Cliente"> | boolean
    advogadoId?: IntFilter<"Cliente"> | number
  }

  export type ModeloTextoUpsertWithWhereUniqueWithoutAdvogadoInput = {
    where: ModeloTextoWhereUniqueInput
    update: XOR<ModeloTextoUpdateWithoutAdvogadoInput, ModeloTextoUncheckedUpdateWithoutAdvogadoInput>
    create: XOR<ModeloTextoCreateWithoutAdvogadoInput, ModeloTextoUncheckedCreateWithoutAdvogadoInput>
  }

  export type ModeloTextoUpdateWithWhereUniqueWithoutAdvogadoInput = {
    where: ModeloTextoWhereUniqueInput
    data: XOR<ModeloTextoUpdateWithoutAdvogadoInput, ModeloTextoUncheckedUpdateWithoutAdvogadoInput>
  }

  export type ModeloTextoUpdateManyWithWhereWithoutAdvogadoInput = {
    where: ModeloTextoScalarWhereInput
    data: XOR<ModeloTextoUpdateManyMutationInput, ModeloTextoUncheckedUpdateManyWithoutAdvogadoInput>
  }

  export type ModeloTextoScalarWhereInput = {
    AND?: ModeloTextoScalarWhereInput | ModeloTextoScalarWhereInput[]
    OR?: ModeloTextoScalarWhereInput[]
    NOT?: ModeloTextoScalarWhereInput | ModeloTextoScalarWhereInput[]
    id?: IntFilter<"ModeloTexto"> | number
    titulo?: StringFilter<"ModeloTexto"> | string
    texto?: StringFilter<"ModeloTexto"> | string
    isActive?: BoolFilter<"ModeloTexto"> | boolean
    advogadoId?: IntFilter<"ModeloTexto"> | number
  }

  export type AdvogadoCreateWithoutClientesInput = {
    createdAt?: Date | string
    email: string
    password: string
    nome?: string | null
    nascimento?: Date | string | null
    role?: $Enums.Role
    isActive?: boolean
    modelosTexto?: ModeloTextoCreateNestedManyWithoutAdvogadoInput
  }

  export type AdvogadoUncheckedCreateWithoutClientesInput = {
    id?: number
    createdAt?: Date | string
    email: string
    password: string
    nome?: string | null
    nascimento?: Date | string | null
    role?: $Enums.Role
    isActive?: boolean
    modelosTexto?: ModeloTextoUncheckedCreateNestedManyWithoutAdvogadoInput
  }

  export type AdvogadoCreateOrConnectWithoutClientesInput = {
    where: AdvogadoWhereUniqueInput
    create: XOR<AdvogadoCreateWithoutClientesInput, AdvogadoUncheckedCreateWithoutClientesInput>
  }

  export type AdvogadoUpsertWithoutClientesInput = {
    update: XOR<AdvogadoUpdateWithoutClientesInput, AdvogadoUncheckedUpdateWithoutClientesInput>
    create: XOR<AdvogadoCreateWithoutClientesInput, AdvogadoUncheckedCreateWithoutClientesInput>
    where?: AdvogadoWhereInput
  }

  export type AdvogadoUpdateToOneWithWhereWithoutClientesInput = {
    where?: AdvogadoWhereInput
    data: XOR<AdvogadoUpdateWithoutClientesInput, AdvogadoUncheckedUpdateWithoutClientesInput>
  }

  export type AdvogadoUpdateWithoutClientesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    modelosTexto?: ModeloTextoUpdateManyWithoutAdvogadoNestedInput
  }

  export type AdvogadoUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    modelosTexto?: ModeloTextoUncheckedUpdateManyWithoutAdvogadoNestedInput
  }

  export type AdvogadoCreateWithoutModelosTextoInput = {
    createdAt?: Date | string
    email: string
    password: string
    nome?: string | null
    nascimento?: Date | string | null
    role?: $Enums.Role
    isActive?: boolean
    clientes?: ClienteCreateNestedManyWithoutAdvogadoInput
  }

  export type AdvogadoUncheckedCreateWithoutModelosTextoInput = {
    id?: number
    createdAt?: Date | string
    email: string
    password: string
    nome?: string | null
    nascimento?: Date | string | null
    role?: $Enums.Role
    isActive?: boolean
    clientes?: ClienteUncheckedCreateNestedManyWithoutAdvogadoInput
  }

  export type AdvogadoCreateOrConnectWithoutModelosTextoInput = {
    where: AdvogadoWhereUniqueInput
    create: XOR<AdvogadoCreateWithoutModelosTextoInput, AdvogadoUncheckedCreateWithoutModelosTextoInput>
  }

  export type TagCreateWithoutModelosInput = {
    nome: string
  }

  export type TagUncheckedCreateWithoutModelosInput = {
    id?: number
    nome: string
  }

  export type TagCreateOrConnectWithoutModelosInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutModelosInput, TagUncheckedCreateWithoutModelosInput>
  }

  export type AdvogadoUpsertWithoutModelosTextoInput = {
    update: XOR<AdvogadoUpdateWithoutModelosTextoInput, AdvogadoUncheckedUpdateWithoutModelosTextoInput>
    create: XOR<AdvogadoCreateWithoutModelosTextoInput, AdvogadoUncheckedCreateWithoutModelosTextoInput>
    where?: AdvogadoWhereInput
  }

  export type AdvogadoUpdateToOneWithWhereWithoutModelosTextoInput = {
    where?: AdvogadoWhereInput
    data: XOR<AdvogadoUpdateWithoutModelosTextoInput, AdvogadoUncheckedUpdateWithoutModelosTextoInput>
  }

  export type AdvogadoUpdateWithoutModelosTextoInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    clientes?: ClienteUpdateManyWithoutAdvogadoNestedInput
  }

  export type AdvogadoUncheckedUpdateWithoutModelosTextoInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    clientes?: ClienteUncheckedUpdateManyWithoutAdvogadoNestedInput
  }

  export type TagUpsertWithWhereUniqueWithoutModelosInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutModelosInput, TagUncheckedUpdateWithoutModelosInput>
    create: XOR<TagCreateWithoutModelosInput, TagUncheckedCreateWithoutModelosInput>
  }

  export type TagUpdateWithWhereUniqueWithoutModelosInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutModelosInput, TagUncheckedUpdateWithoutModelosInput>
  }

  export type TagUpdateManyWithWhereWithoutModelosInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutModelosInput>
  }

  export type TagScalarWhereInput = {
    AND?: TagScalarWhereInput | TagScalarWhereInput[]
    OR?: TagScalarWhereInput[]
    NOT?: TagScalarWhereInput | TagScalarWhereInput[]
    id?: IntFilter<"Tag"> | number
    nome?: StringFilter<"Tag"> | string
  }

  export type ModeloTextoCreateWithoutTagsInput = {
    titulo: string
    texto: string
    isActive?: boolean
    advogado: AdvogadoCreateNestedOneWithoutModelosTextoInput
  }

  export type ModeloTextoUncheckedCreateWithoutTagsInput = {
    id?: number
    titulo: string
    texto: string
    isActive?: boolean
    advogadoId: number
  }

  export type ModeloTextoCreateOrConnectWithoutTagsInput = {
    where: ModeloTextoWhereUniqueInput
    create: XOR<ModeloTextoCreateWithoutTagsInput, ModeloTextoUncheckedCreateWithoutTagsInput>
  }

  export type ModeloTextoUpsertWithWhereUniqueWithoutTagsInput = {
    where: ModeloTextoWhereUniqueInput
    update: XOR<ModeloTextoUpdateWithoutTagsInput, ModeloTextoUncheckedUpdateWithoutTagsInput>
    create: XOR<ModeloTextoCreateWithoutTagsInput, ModeloTextoUncheckedCreateWithoutTagsInput>
  }

  export type ModeloTextoUpdateWithWhereUniqueWithoutTagsInput = {
    where: ModeloTextoWhereUniqueInput
    data: XOR<ModeloTextoUpdateWithoutTagsInput, ModeloTextoUncheckedUpdateWithoutTagsInput>
  }

  export type ModeloTextoUpdateManyWithWhereWithoutTagsInput = {
    where: ModeloTextoScalarWhereInput
    data: XOR<ModeloTextoUpdateManyMutationInput, ModeloTextoUncheckedUpdateManyWithoutTagsInput>
  }

  export type ClienteCreateManyAdvogadoInput = {
    id?: number
    nome: string
    tipo?: $Enums.Tipo
    cpf?: string | null
    cnpj?: string | null
    nascimento?: string | null
    nomeMae?: string | null
    nomePai?: string | null
    conjuge?: string | null
    estadoCivil?: string | null
    isActive?: boolean
  }

  export type ModeloTextoCreateManyAdvogadoInput = {
    id?: number
    titulo: string
    texto: string
    isActive?: boolean
  }

  export type ClienteUpdateWithoutAdvogadoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    nomeMae?: NullableStringFieldUpdateOperationsInput | string | null
    nomePai?: NullableStringFieldUpdateOperationsInput | string | null
    conjuge?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClienteUncheckedUpdateWithoutAdvogadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    nomeMae?: NullableStringFieldUpdateOperationsInput | string | null
    nomePai?: NullableStringFieldUpdateOperationsInput | string | null
    conjuge?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClienteUncheckedUpdateManyWithoutAdvogadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoFieldUpdateOperationsInput | $Enums.Tipo
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: NullableStringFieldUpdateOperationsInput | string | null
    nascimento?: NullableStringFieldUpdateOperationsInput | string | null
    nomeMae?: NullableStringFieldUpdateOperationsInput | string | null
    nomePai?: NullableStringFieldUpdateOperationsInput | string | null
    conjuge?: NullableStringFieldUpdateOperationsInput | string | null
    estadoCivil?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ModeloTextoUpdateWithoutAdvogadoInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tags?: TagUpdateManyWithoutModelosNestedInput
  }

  export type ModeloTextoUncheckedUpdateWithoutAdvogadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    tags?: TagUncheckedUpdateManyWithoutModelosNestedInput
  }

  export type ModeloTextoUncheckedUpdateManyWithoutAdvogadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TagUpdateWithoutModelosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutModelosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyWithoutModelosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ModeloTextoUpdateWithoutTagsInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogado?: AdvogadoUpdateOneRequiredWithoutModelosTextoNestedInput
  }

  export type ModeloTextoUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogadoId?: IntFieldUpdateOperationsInput | number
  }

  export type ModeloTextoUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    texto?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    advogadoId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AdvogadoCountOutputTypeDefaultArgs instead
     */
    export type AdvogadoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdvogadoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModeloTextoCountOutputTypeDefaultArgs instead
     */
    export type ModeloTextoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModeloTextoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdvogadoDefaultArgs instead
     */
    export type AdvogadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdvogadoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteDefaultArgs instead
     */
    export type ClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModeloTextoDefaultArgs instead
     */
    export type ModeloTextoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModeloTextoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}